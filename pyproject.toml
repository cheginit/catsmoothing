[build-system]
build-backend = "maturin"

requires = [ "maturin>=1.4,<2" ]

[project]
name = "catsmoothing"
version = "0.3.0"
description = "Smoothing Shapely geometries using Catmull-Rom spline"
readme = "README.md"
license = { text = "MIT" }
authors = [ { name = "Taher Chegini", email = "cheginit@gmail.com" } ]
requires-python = ">=3.10"
classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Science/Research",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Rust",
  "Topic :: Scientific/Engineering",
  "Topic :: Scientific/Engineering :: GIS",
  "Typing :: Typed",
]
dependencies = [ "numpy>=2", "shapely>=2" ]
optional-dependencies.benchmark = [
  "pytest-codspeed",
]
optional-dependencies.dev = [
  "ipykernel",
  "ipywidgets",
  "matplotlib",
  "pytest",
]
optional-dependencies.docs = [
  "black",
  "mkdocs",
  "mkdocs-jupyter",
  "mkdocs-material",
  "mkdocstrings-python",
]
optional-dependencies.lint = [
  "codespell",
  "pre-commit",
]
optional-dependencies.test = [
  "coverage[toml]",
  "pytest-cov",
  "pytest-sugar",
]
optional-dependencies.typecheck = [
  "pyright",
]
urls.Changelog = "https://github.com/cheginit/catsmoothing/blob/main/CHANGELOG.md"
urls.CI = "https://github.com/cheginit/catsmoothing/actions"
urls.Homepage = "https://github.com/cheginit/catsmoothing"
urls.Issues = "https://github.com/cheginit/catsmoothing/issues"

[tool.maturin]
# "extension-module" tells pyo3 we want to build an
# extension module (skips linking against libpython.so)
features = [ "pyo3/extension-module", "python" ]
module-name = "catsmoothing._catsmoothing"
# Bindings type
bindings = "pyo3"
# Strip the library for minimum file size
strip = true
# Build artifacts with the specified Cargo profile
profile = "release"

[tool.ruff]
target-version = "py310"
line-length = 100

exclude = [ "__pycache__", "benchmarks" ]

lint.select = [
  # flake8-bugbear
  "B",
  # flake8-comprehensions
  "C4",
  # pydocstyle
  "D",
  # Error
  "E",
  # pyflakes
  "F",
  # isort
  "I",
  # flake8-gettext
  "INT",
  # flake8-implicit-str-concat
  "ISC",
  # pep8-naming
  "N",
  # compatibility with numpy 2.0
  "NPY201",
  # Perflint
  "PERF",
  # pygrep-hooks
  "PGH",
  # misc lints
  "PIE",
  # pylint
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  # flake8-pytest-style
  "PT",
  # flake8-use-pathlib
  "PTH",
  # flake8-pyi
  "PYI",
  # flake8-quotes
  "Q",
  # Ruff-specific rules
  "RUF",
  # bandit
  "S",
  # flake8-simplify
  "SIM",
  # flake8-debugger
  "T10",
  # flake8-print
  "T20",
  # type-checking imports
  "TC",
  # tidy imports
  "TID",
  # tryceratops
  "TRY",
  # pyupgrade
  "UP",
  # Warning
  "W",
  # flake8-2020
  "YTT",
]

lint.ignore = [
  "D103",
  "D105",
  "E501",
  # conflict with ruff-formatter
  "ISC001",
  "PLR0913",
  "PLR2004",
  # url schema
  "S310",
  "S603",
  # shell command
  "S605",
  "S607",
  # custom exception
  "TRY003",
]
lint.per-file-ignores."catsmoothing/catsmoothing.py" = [
  # specific type error ignored
  "PGH003",
]
lint.per-file-ignores."catsmoothing/tests/*.py" = [
  "D100",
  "D101",
  "D102",
  "D103",
  "D104",
  "D105",
  "D106",
  "D107",
  # specific type error ignored
  "PGH003",
  # use of "assert"
  "S101",
]
lint.extend-safe-fixes = [
  # module level imports
  "E402",
  # break down assert
  "PT018",
  # Move imports
  "TC",
  # absolute imports
  "TID252",
]
lint.isort.known-first-party = [ "catsmoothing" ]
lint.isort.required-imports = [ "from __future__ import annotations" ]
lint.pydocstyle.convention = "numpy"

[tool.codespell]
skip = "__pycache__,_build,.mypy_cache,.git,./htmlcov,cache,pixi.lock,**.ipynb,./target,./site/"
ignore-words-list = "crate,gages"

[tool.pytest.ini_options]
addopts = [
  "--import-mode=importlib",
  "-v",
]
doctest_optionflags = 'NORMALIZE_WHITESPACE IGNORE_EXCEPTION_DETAIL NUMBER'
testpaths = [ "catsmoothing/tests" ]
markers = [
  "benchmark: Tests that are benchmarks",
]

[tool.coverage.report]
exclude_lines = [ "if TYPE_CHECKING:" ]
omit = [ "**/__init__.py" ]
ignore_errors = true

[tool.coverage.paths]
source = [ "catsmoothing", "*/site-packages" ]
omit = [ "**/__init__.py", "**/tests/*.py" ]

[tool.coverage.run]
branch = true
source = [ "catsmoothing" ]
omit = [ "**/__init__.py", "**/tests/*.py" ]

[tool.pyright]
exclude = [ "**/__pycache__", "**/__init__.py", "catsmoothing/tests", "docs/" ]
include = [ "catsmoothing" ]
reportMissingTypeStubs = false
reportUnknownArgumentType = false
reportUnknownLambdaType = false
reportUnknownMemberType = false
reportUnknownParameterType = false
reportUnknownVariableType = false
reportUnnecessaryIsInstance = false
reportUntypedFunctionDecorator = false
reportAttributeAccessIssue = false
typeCheckingMode = "strict"

[tool.pixi.project]
channels = [ "conda-forge" ]
platforms = [ "linux-64", "osx-64", "osx-arm64", "win-64" ]

[tool.pixi.pypi-dependencies]
catsmoothing = { path = ".", editable = true }

[tool.pixi.feature.py310.dependencies]
python = "~=3.10.0"
maturin = "*"
uv = "*"
pip = "*"
tomli = "*"

[tool.pixi.feature.py313.dependencies]
python = "~=3.13.0"
maturin = "*"
uv = "*"
pip = "*"

[tool.pixi.environments]
dev = { features = [ "dev", "py313" ] }
test310 = { features = [ "test", "py310" ] }
test313 = { features = [ "test", "py313" ] }
benchmark = { features = [ "benchmark", "py313" ] }
typecheck = { features = [ "typecheck", "py313" ] }
lint = { features = [ "lint", "py313" ], no-default-feature = true }
docs = { features = [ "docs", "py313" ] }

[tool.pixi.tasks]
preinstall = "maturin develop --uv"

[tool.pixi.feature.test.tasks]
test = { cmd = [
  "pytest",
  "--cov",
  "--cov-append",
  "--cov-branch",
  "--cov-report=xml",
  "--junitxml=junit.xml",
  "--durations=5",
], depends-on = [ "preinstall" ] }
report = { cmd = [ "coverage", "report" ], depends-on = [ "test" ] }
html = { cmd = [ "coverage", "html" ], depends-on = [ "report" ] }

[tool.pixi.feature.benchmark.tasks]
benchmark = { cmd = [ "pytest", "catsmoothing/tests", "--codspeed" ], depends-on = [ "preinstall" ] }

[tool.pixi.feature.lint.tasks]
lint = "pre-commit run --all-files"
pcupdate = "pre-commit autoupdate"
spell = "codespell -w"

[tool.pixi.feature.typecheck.tasks]
typecheck = { cmd = [ "pyright" ], depends-on = [ "preinstall" ] }

[tool.pixi.feature.docs.tasks]
build-docs = "mkdocs build --strict"
docs = { cmd = [ "mkdocs", "serve" ], depends-on = [ "preinstall", "build-docs" ] }
